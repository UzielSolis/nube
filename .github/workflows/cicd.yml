name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Ajusta si usas otro nombre de rama principal
  pull_request:
    branches:
      - main  # Ajusta si usas otro nombre de rama principal

env:
  NODE_ENV: production
  VERSION_TAG: "1.0.${{ github.run_id }}-${{ github.ref_name }}"
  DOCKER_IMAGE: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ env.VERSION_TAG }}"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install

      - name: Build project
        run: |
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: nube/dist

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Build and Push Docker image
        run: |
          docker build -t my-app-image .
          docker tag my-app-image:latest ${{ env.DOCKER_IMAGE }}
          docker push ${{ env.DOCKER_IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH key for EC2 access
        run: |
          echo "${{ secrets.EC2_KEY }}" > /tmp/ssh_key.pem
          chmod 600 /tmp/ssh_key.pem

      - name: Deploy to EC2
        run: |
          REMOTE_COMMAND=" 
            $(aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com) &&
            docker pull ${{ env.DOCKER_IMAGE }} &&
            docker stop demo-twelve || true &&
            docker container rm -f demo-twelve || true &&
            docker run -d --name demo-twelve -p 8080:8080 ${{ env.DOCKER_IMAGE }}
          "
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_DEV }} "$REMOTE_COMMAND"
