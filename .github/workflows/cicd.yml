name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build TypeScript files
        run: npm run build

  docker:
    needs: build
    runs-on: ubuntu-latest
    environment: TEST
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set aws_session_token $AWS_SESSION_TOKEN
          aws configure set default.region ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t my-app .
          docker tag my-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}

      - name: Push to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    environment: examen_2
    steps:
      - name: Create SSH Key
        run: echo "${{ secrets.EC2_KEY }}" > /tmp/ssh_key.pem

      - name: Permissions
        run: chmod 600 /tmp/ssh_key.pem

      - name: SSH into EC2 and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_DEV }} << 'EOF'
            set -euo pipefail  # Mejor manejo de errores

            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}

            # Re-autenticaciÃ³n en ECR
            echo "Logging into Amazon ECR..."
            if ! aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com; then
              echo "Error: AWS ECR login failed."
              exit 1
            fi

            # Verificar si la imagen existe antes de intentar pull
            echo "Checking if image exists in ECR..."
            IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.run_id }}
            if ! aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY }} --image-ids imageTag=${{ github.run_id }} --region ${{ secrets.AWS_DEFAULT_REGION }} > /dev/null 2>&1; then
              echo "Error: Image $IMAGE not found in ECR."
              exit 1
            fi

            # Pull de la imagen
            echo "Pulling image from ECR..."
            docker pull $IMAGE

            # Detener y eliminar el contenedor si ya existe
            echo "Stopping and removing old container (if exists)..."
            docker stop purple-container || true
            docker container rm -f purple-container || true

            # Correr nuevo contenedor
            echo "Running new container..."
            docker run -d --name purple-container -p 8080:8080 $IMAGE

            echo "Deployment complete!"
          EOF
